{
	"desc": "Item type for managing git checkouts",
	"help": "\nUsage instructions\n==================\n\nPut this in your bundle.py:\n\n\tdirectories = {\n\t    \"/var/tmp/example\": {},\n\t}\n\n\tgit_deploy = {\n\t    \"/var/tmp/example\": {\n\t        'needs': [\"directory:/var/tmp/example\"],\n\t        'repo': \"example\",\n\t        'rev': \"master\",\n\t        'use_xattrs': True,\n\t    },\n\t}\n\nPut this in a file called git_deploy_repos in your bw repository root:\n\n\texample: /Users/jdoe/Projects/example\n\nThis file should also be added to your .gitignore if you are sharing\nthat repo with a team. Each team member must provide a mapping of the\nrepo name used in the bundle (\"example\" in this case) to a local\nfilesystem path with a git repository. It is each user's responsibility\nto make sure the clone in that location is up to date.\n\nAlternatively, the repo attribute in the bundle can point directly to a\ngit URL:\n\n\tgit_deploy = {\n\t    \"/var/tmp/example\": {\n\t        'repo': \"https://github.com/bundlewrap/bundlewrap.git\",\n\t        [...]\n\t    },\n\t}\n\nNote however that this has a severe performance penalty, as a new clone\nof that repo has to be made every time the status of the item is\nchecked.\n\nThe 'rev' attribute can contain anything `git rev-parse` can resolve\ninto a commit hash (branch names, tags, first few characters of full\ncommit hash). Note that you should probably use tags here. *Never* use\nHEAD (use a branch name like 'master' instead).\n\nThis plugin needs to store the deployed commit hash on the node. The\n'use_xattrs' attribute controls how this is done. If set to True,\ngit_deploy will use the `attr` command on the node to store the hash as\nan extended file system attribute. Since `attr` might not be installed\non the node, the default is to place a dotfile in the target directory\ninstead (keep that in mind when deploying websites etc.).\n\nAs illustrated in the example above, you *always* have to create a \ndependency on a directory item or otherwise make sure the directory\nyou're deploying to is already there.\n\ngit_deploy will only upload a tarball with the data from the git repo,\nno part of the git history is leaked to the node.",
	"provides": [
		"items/git_deploy.py"
	],
	"version": 2
}
